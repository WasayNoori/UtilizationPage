@page
@model IndexModel
@using System.Security.Claims 
@{
    ViewData["Title"] = "Utilization Data";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

@functions {
    public string GetUserEmail(System.Security.Claims.ClaimsPrincipal user)
    {
        return user.FindFirstValue("preferred_username") ?? user.FindFirstValue(ClaimTypes.Email);
    }
}

<div class="container-fluid">
    <input type="hidden" id="currentUserEmailInput" data-email="@(User.FindFirstValue(ClaimTypes.Email) ?? User.FindFirstValue("preferred_username"))" />
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <div style="font-family: 'Poppins', sans-serif; font-weight: 300; color: #0d6efd; font-size: 1.1rem; margin-bottom: 5px;">Hawk Ridge Systems Engineering</div>
            <div class="d-flex align-items-center">
                <h1 class="page-title mb-0">Utilization</h1>
                <button id="refreshButton" class="btn btn-link btn-sm p-0 ms-2" style="color: #0d6efd; font-size: 1.2rem;">
                    <i class="fas fa-sync-alt"></i>
                </button>
            </div>
            <div class="d-flex flex-column">
                <div class="fs-4 text-dark">
                    Hello <span id="userGreeting" class="fw-bold">@Model.UserName</span>
                </div>
                <div id="totalHoursToday" style="font-size: 0.9rem; color: #198754; font-weight: 500;">
                    Total Team Hours Today: Loading...
                </div>
            </div>
        </div>
        <div class="d-flex flex-column align-items-end">
            <div id="lastUpdateTime" style="font-size: 0.75rem; color: #6c757d; margin-bottom: 5px;"></div>
            <div class="d-flex align-items-center gap-3">
                <div class="user-select-container">
                    <label for="userSelect" class="form-label me-2">Select User:</label>
                    <select id="userSelect" class="form-select" style="width: auto;" onchange="handleUserChange(this.value)">
                        <option value="">Loading users...</option>
                    </select>
                </div>
                <div class="time-filter-container" style="background-color: #f8f9fa; padding: 10px 15px; border-radius: 5px; border: 1px solid #dee2e6;">
                    <label for="timeFilter" class="form-label me-2" style="font-weight: 500; color: #0d6efd;">Time Period:</label>
                    <select id="timeFilter" class="form-select" style="width: auto; min-width: 200px; border-color: #0d6efd;" onchange="handleTimeFilterChange(this.value)">
                        <optgroup label="Recent Periods">
                            <option value="Today">Today</option>
                            <option value="Yesterday">Yesterday</option>
                            <option value="TwoWeeksAgo">Last 2 Weeks</option>
                            <option value="ThisWeek">This Week</option>
                            <option value="LastWeek">Last Week</option>
                        </optgroup>
                        <optgroup label="Monthly View">
                            @{
                                var currentMonth = DateTime.Now.Month;
                                var currentYear = DateTime.Now.Year;
                                
                                for (int month = 1; month <= 12; month++) {
                                    var date = new DateTime(currentYear, month, 1);
                                    var monthName = date.ToString("MMMM");
                                    var value = $"Month_{currentYear}_{month:00}";
                                    var isFutureMonth = month > currentMonth;
                                    
                                    if (isFutureMonth) {
                                        <option value="@value" disabled style="color: #aaa;">@monthName</option>
                                    } else {
                                        <option value="@value">@monthName</option>
                                    }
                                }
                            }
                        </optgroup>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Tab Structure -->
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="utilization-tab" data-bs-toggle="tab" data-bs-target="#utilization" type="button" role="tab" aria-controls="utilization" aria-selected="true">Utilization Data</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="visualizations-tab" data-bs-toggle="tab" data-bs-target="#visualizations" type="button" role="tab" aria-controls="visualizations" aria-selected="false">Trends</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="mvp-tab" data-bs-toggle="tab" data-bs-target="#mvp" type="button" role="tab" aria-controls="mvp" aria-selected="false">MVP 🏆</button>
        </li>
    </ul>
    <div class="tab-content" id="myTabContent">
        <div class="tab-pane fade show active" id="utilization" role="tabpanel" aria-labelledby="utilization-tab">
            <div style="position: relative;">
                <div id="loadingOverlay" style="display: none; position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(255,255,255,0.8); z-index: 1000; text-align: center; padding-top: 200px;">
                    Loading data...
                </div>
                <div id="timeTrackingTable"></div>
            </div>

            <div style="display:flex; gap:20px; margin-top:20px;">
                <table class="table" style="width:45%;">
                    <thead>
                        <tr><th colspan="6">This Week's Hours</th></tr>
                        <tr>
                            <th></th>
                            <th>Mon</th>
                            <th>Tue</th>
                            <th>Wed</th>
                            <th>Thu</th>
                            <th>Fri</th>
                        </tr>
                    </thead>
                    <tbody id="weeklyTotalsThis"></tbody>
                </table>

                <table class="table" style="width:45%;">
                    <thead>
                        <tr><th colspan="6">Last Week's Hours</th></tr>
                        <tr>
                            <th></th>
                            <th>Mon</th>
                            <th>Tue</th>
                            <th>Wed</th>
                            <th>Thu</th>
                            <th>Fri</th>
                        </tr>
                    </thead>
                    <tbody id="weeklyTotalsLast"></tbody>
                </table>
            </div>

            <div style="margin: 30px 0; text-align: center;">
                <div style="display: inline-block; width: 100%; height: 2px; background: linear-gradient(to right, transparent, #20c997, transparent);"></div>
            </div>

            <div style="margin-top: 20px; background-color: #f8f9fa; padding: 15px; border-radius: 5px; border: 1px solid #dee2e6;">
                <table class="table" style="width: 100%;">
                    <thead>
                        <tr><th colspan="13">Monthly User Hours vs Team Average</th></tr>
                        <tr>
                            <th>Metric</th>
                            <th>Jan</th>
                            <th>Feb</th>
                            <th>Mar</th>
                            <th>Apr</th>
                            <th>May</th>
                            <th>Jun</th>
                            <th>Jul</th>
                            <th>Aug</th>
                            <th>Sep</th>
                            <th>Oct</th>
                            <th>Nov</th>
                            <th>Dec</th>
                        </tr>
                    </thead>
                    <tbody id="monthlyComparison"></tbody>
                </table>
            </div>

            <div style="margin-top: 30px; background-color: #f8f9fa; padding: 15px; border-radius: 5px; border: 1px solid #dee2e6;">
                <h5 style="color: #0d6efd; margin-bottom: 15px;">Weekend Hours Logged</h5>
                <div id="weekendHoursTabulatorTable"></div>
                <div id="noWeekendHoursMessage" style="display: none; text-align: center; padding: 20px; color: #6c757d;">
                    No weekend hours logged.
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="visualizations" role="tabpanel" aria-labelledby="visualizations-tab">
            <div id="visualizationsContent" style="padding: 20px;">
                <div class="card">
                    <div class="card-body">
                        <div style="height: 500px; position: relative;">
                            <canvas id="weeklyChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="mvp" role="tabpanel" aria-labelledby="mvp-tab">
            <div class="container mt-4">
                <div class="row justify-content-center">
                    <div class="col-md-5">
                        <div class="card mvp-card">
                            <div class="card-header text-center" style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #2C3E50; font-size: 22px; font-weight: bold; text-transform: uppercase; padding: 20px;">
                                <i class="fas fa-trophy" style="color: #2C3E50; margin-right: 10px;"></i>
                                Most Utilized Overall
                            </div>
                            <div class="card-body" style="background: #FFFFFF;">
                                <table class="table" id="mvpTable">
                                    <thead>
                                        <tr style="background: #2C3E50; color: white;">
                                            <th scope="col" class="text-center" style="font-size: 18px;">Rank</th>
                                            <th scope="col" style="font-size: 18px;">User Name</th>
                                            <th scope="col" class="text-center" style="font-size: 18px;">Total Hours</th>
                                        </tr>
                                    </thead>
                                    <tbody id="mvpTableBody">
                                        <!-- Data will be populated by JavaScript -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-5">
                        <div class="card mvp-card">
                            <div class="card-header text-center" style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #2C3E50; font-size: 22px; font-weight: bold; text-transform: uppercase; padding: 20px;">
                                <i class="fas fa-trophy" style="color: #2C3E50; margin-right: 10px;"></i>
                                Most Utilized in <span id="currentMonthName"></span>
                            </div>
                            <div class="card-body" style="background: #FFFFFF;">
                                <table class="table" id="mvpLastMonthTable">
                                    <thead>
                                        <tr style="background: #2C3E50; color: white;">
                                            <th scope="col" class="text-center" style="font-size: 18px;">Rank</th>
                                            <th scope="col" style="font-size: 18px;">User Name</th>
                                            <th scope="col" class="text-center" style="font-size: 18px;">Total Hours</th>
                                        </tr>
                                    </thead>
                                    <tbody id="mvpLastMonthTableBody">
                                        <!-- Data will be populated by JavaScript -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.0.7/js/tabulator.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.0.7/css/tabulator.min.css">
    <!-- Add Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        $(document).ready(function () {
            console.log("Page initialization started");
            loadUsers();
            loadMVPData();
            // Load weekly data after a short delay to ensure user data is loaded
            setTimeout(() => {
                console.log("Loading weekly data after delay");
                loadWeeklyData();
            }, 1000);
            $('#userSelect').change(onUserChange);
            $('#timeFilter').change(onTimeFilterChange);
        });

        function loadUsers() {
            console.group('🔍 loadUsers() Function Execution');
            console.log('%c Step 1: Function Started', 'background: #222; color: #bada55; font-size: 16px; padding: 4px;');
            
            const requestUrl = '/Index?handler=Users';
            console.log('%c Step 2: Request URL prepared: ' + requestUrl, 'color: #0066cc; font-weight: bold;');

            // Log the current state before making the request
            console.log('%c Step 3: Current users variable state:', 'color: #9933cc;', typeof users !== 'undefined' ? users : 'undefined');

            $.get(requestUrl)
                .done(function (data) {
                    console.group('%c Step 4: AJAX Response Received', 'background: #222; color: #bada55; font-size: 14px;');
                    console.log('Raw response data:', data);
                    console.log('Response type:', typeof data);
                    console.log('Is Array?', Array.isArray(data));
                    if (data && typeof data === 'object') {
                        console.log('Has data property?', 'data' in data);
                        console.log('data.success =', data.success);
                        if (data.data) {
                            console.log('data.data type:', typeof data.data);
                            console.log('data.data is Array?', Array.isArray(data.data));
                        }
                    }
                    console.groupEnd();

                    if (data && Array.isArray(data)) {
                        console.log('%c Step 5A: Direct array response received', 'color: #00aa00; font-weight: bold;');
                        users = data;
                        console.table(users);
                        populateUserDropdown();
                    } else if (data && data.data && Array.isArray(data.data)) {
                        console.log('%c Step 5B: Nested array response received', 'color: #00aa00; font-weight: bold;');
                        users = data.data;
                        console.table(users);
                        populateUserDropdown();
                    } else {
                        console.error('%c Step 5C: Invalid data format received', 'color: #aa0000; font-weight: bold;');
                        console.error('Received data structure:', data);
                        $('#userSelect').html('<option value="">Error loading users</option>');
                    }
                })
                .fail(function(jqXHR, textStatus, errorThrown) {
                    console.group('%c AJAX Error Details', 'background: #aa0000; color: white; font-size: 14px;');
                    console.error('Status Code:', jqXHR.status);
                    console.error('Status Text:', jqXHR.statusText);
                    console.error('Response Text:', jqXHR.responseText);
                    console.error('Error Thrown:', errorThrown);
                    console.groupEnd();
                    
                    $('#userSelect').html('<option value="">Error loading users</option>');
                })
                .always(function() {
                    console.groupEnd(); // End the loadUsers group
                });
        }

        function populateUserDropdown() {
            console.group('🔄 populateUserDropdown() Function Execution');
            console.log('%c Step 1: Starting dropdown population', 'background: #222; color: #bada55; font-size: 14px;');
            
            // Log the users variable state
            console.log('Current users variable:', users);
            console.log('Users type:', typeof users);
            console.log('Is users an array?', Array.isArray(users));
            console.log('Users length:', users ? users.length : 'N/A');

            if (!users || !Array.isArray(users) || users.length === 0) {
                console.warn('%c Step 2A: No valid users data available', 'color: #aa7700; font-weight: bold;');
                $('#userSelect').html('<option value="">No users available</option>');
                console.groupEnd();
                return;
            }

            console.log('%c Step 2B: Valid users data found', 'color: #00aa00; font-weight: bold;');
            console.table(users);
            
            var select = $('#userSelect');
            console.log('Select element found:', select.length > 0);
            
            select.empty();
            console.log('Dropdown cleared');
            
            // Add the default "Select User" option
            select.append('<option value="">Select User</option>');
            console.log('Default option added');
            
            // Sort users by name
            users.sort((a, b) => a.userName.localeCompare(b.userName));
            console.log('Users sorted alphabetically');
            
            users.forEach(function(user, index) {
                console.log(`Adding user ${index + 1}:`, user);
                var option = $('<option>', {
                    value: user.email,
                    text: user.userName
                });
                select.append(option);
            });
            
            // Log final state
            console.log('%c Final dropdown state:', 'color: #0066cc;');
            $('#userSelect option').each(function() {
                console.log(`Option: ${$(this).text()} (value: ${$(this).val()})`);
            });

            // Try to set current user
            var currentUserEmail = $('#currentUserEmailInput').data('email');
            if (currentUserEmail) {
                console.log('Attempting to set current user:', currentUserEmail);
                select.val(currentUserEmail);
                console.log('Selected value after setting:', select.val());
                if (select.val() !== currentUserEmail) {
                    console.warn('Could not set current user in dropdown');
                }
            }

            console.groupEnd();
        }

        var table = new Tabulator("#timeTrackingTable", {
            layout: "fitColumns",
            dataTree: true,
            dataTreeStartExpanded: false,
            dataTreeChildField: "children",
            height: "400px",
            columns: [
                { 
                    title: "Board - Items", 
                    field: "task", 
                    headerSort: false,
                    formatter: function(cell, formatterParams, onRendered) {
                        return cell.getValue();
                    }
                },
                { 
                    title: "Date", 
                    field: "entryDate", 
                    headerSort: false,
                    formatter: function(cell, formatterParams, onRendered) {
                        return cell.getValue();
                    }
                },
                { 
                    title: "Hours", 
                    field: "hours", 
                    hozAlign: "left",
                    formatter: function(cell, formatterParams, onRendered) {
                        return cell.getValue();
                    }
                },
                {
                    title: "% of Total",
                    field: "percentage",
                    hozAlign: "left",
                    formatter: function(cell, formatterParams, onRendered) {
                        const value = cell.getValue();
                        const row = cell.getRow();
                        const data = row.getData();
                        // Only show percentage for top-level rows (boards)
                        if (!data.children) return "";
                        return value ? value + "%" : "";
                    }
                },
                {
                    title: "Category",
                    field: "categoryName",
                    headerSort: false,
                    formatter: function(cell, formatterParams, onRendered) {
                        const value = cell.getValue();
                        const row = cell.getRow();
                        const data = row.getData();
                        // Only show category for top-level rows (boards)
                        if (!data.children) return "";
                        return value || "";
                    }
                }
            ]
        });

        var weekendTable = null; // Initialize weekend table variable

        // Cache object to store data
        const dataCache = {
            entries: {},
            weeklySummary: {},
            monthlyData: {},
            monthlyComparison: null
        };

        // Different cache durations
        const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes for regular data
        const MONTHLY_CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours for past months

        function isCacheValid(cacheKey, type = 'regular') {
            const cache = type === 'monthly' ? dataCache.monthlyData : dataCache.entries;
            const cacheDuration = type === 'monthly' ? MONTHLY_CACHE_DURATION : CACHE_DURATION;
            const cachedData = cache[cacheKey];
            
            if (!cachedData) return false;
            
            const now = new Date().getTime();
            
            // If it's a past month, use longer cache duration
            if (type === 'monthly') {
                const currentMonth = new Date().getMonth() + 1;
                const selectedMonth = parseInt(cacheKey.split('_')[1]);
                if (selectedMonth < currentMonth) {
                    return true; // Past months don't expire
                }
            }
            
            return (now - cachedData.timestamp) < cacheDuration;
        }

        function handleTimeFilterChange(value) {
            // Prevent selection of disabled months
            const select = document.getElementById('timeFilter');
            const selectedOption = select.options[select.selectedIndex];
            
            if (selectedOption.disabled) {
                // Revert to the previous selection
                select.value = select.dataset.lastValue || 'ThisWeek';
                return;
            }
            
            // Store the current valid selection
            select.dataset.lastValue = value;
            
            const isMonthly = value.startsWith('Month_');
            loadData(false, isMonthly);
            
            // Only load weekly totals for recent periods
            if (!isMonthly) {
                loadWeeklyTotals('THIS', 'weeklyTotalsThis');
                loadWeeklyTotals('LAST', 'weeklyTotalsLast');
            }
            loadMonthlyComparison();
        }

        function loadData(forceRefresh = false, isMonthly = false) {
            var overlay = document.getElementById('loadingOverlay');
            const filterValue = document.getElementById('timeFilter').value;
            
            console.log('Loading data with:', { filterValue, currentUserEmail, forceRefresh, isMonthly });
            
            // Check cache first
            const cacheType = isMonthly ? 'monthly' : 'regular';
            if (!forceRefresh && isCacheValid(filterValue, cacheType)) {
                console.log('Using cached data for ' + filterValue);
                const cache = cacheType === 'monthly' ? dataCache.monthlyData : dataCache.entries;
                console.log('Cached data structure:', JSON.stringify(cache[filterValue].data, null, 2));
                table.setData(cache[filterValue].data);
                return;
            }

            overlay.style.display = 'block';
            
            fetch(`/Index?handler=Entries&filter=${encodeURIComponent(filterValue)}&userEmail=${encodeURIComponent(currentUserEmail)}`)
                .then(response => response.json())
                .then(result => {
                    console.log('Received response:', result);
                    if (!result.success) {
                        console.error('Error in response:', result.error);
                        return;
                    }
                    
                    // Calculate total hours and percentages for boards
                    const data = result.data;
                    const totalHours = data.reduce((total, board) => {
                        const hours = parseHours(board.hours);
                        return total + hours;
                    }, 0);

                    // Add percentage to board-level entries
                    data.forEach(board => {
                        const hours = parseHours(board.hours);
                        board.percentage = Math.round((hours / totalHours) * 100 * 10) / 10;
                    });
                    
                    // Store in appropriate cache
                    if (isMonthly) {
                        dataCache.monthlyData[filterValue] = {
                            data: data,
                            timestamp: new Date().getTime()
                        };
                    } else {
                        dataCache.entries[filterValue] = {
                            data: data,
                            timestamp: new Date().getTime()
                        };
                    }
                    
                    table.setData(data);
                    overlay.style.display = 'none';
                })
                .catch(error => {
                    console.error('Error loading data:', error);
                    overlay.style.display = 'none';
                });
        }

        // Helper function to parse hours from string format
        function parseHours(hoursStr) {
            let total = 0;
            const parts = hoursStr.split(' ');
            parts.forEach(part => {
                if (part.endsWith('h')) {
                    total += parseFloat(part.replace('h', ''));
                } else if (part.endsWith('m')) {
                    total += parseFloat(part.replace('m', '')) / 60;
                }
            });
            return total;
        }

        function loadWeeklyTotals(weekOption, targetElementId, forceRefresh = false) {
            // Check cache first
            if (!forceRefresh && dataCache.weeklySummary[weekOption] && 
                (new Date().getTime() - dataCache.weeklySummary[weekOption].timestamp) < CACHE_DURATION) {
                updateWeeklyTotalsTable(targetElementId, dataCache.weeklySummary[weekOption].data);
                return;
            }

            fetch(`/Index?handler=WeeklySummary&weekOption=${weekOption}&userEmail=${encodeURIComponent(currentUserEmail)}`)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        // Store in cache
                        dataCache.weeklySummary[weekOption] = {
                            data: result.data,
                            timestamp: new Date().getTime()
                        };
                        updateWeeklyTotalsTable(targetElementId, result.data);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function updateWeeklyTotalsTable(targetElementId, data) {
            let summaryRow = `
                <tr>
                    <td>${data.userName}</td>
                    <td class="hours-cell" data-hours="${data.monday < 6}">${data.monday}</td>
                    <td class="hours-cell" data-hours="${data.tuesday < 6}">${data.tuesday}</td>
                    <td class="hours-cell" data-hours="${data.wednesday < 6}">${data.wednesday}</td>
                    <td class="hours-cell" data-hours="${data.thursday < 6}">${data.thursday}</td>
                    <td class="hours-cell" data-hours="${data.friday < 6}">${data.friday}</td>
                </tr>`;
            document.getElementById(targetElementId).innerHTML = summaryRow;
        }

        function loadMonthlyComparison(forceRefresh = false) {
            // Check cache first
            if (!forceRefresh && dataCache.monthlyComparison && 
                (new Date().getTime() - dataCache.monthlyComparison.timestamp) < CACHE_DURATION) {
                updateMonthlyComparisonTable(dataCache.monthlyComparison.data);
                return;
            }

            fetch(`/Index?handler=MonthlyComparison&userEmail=${encodeURIComponent(currentUserEmail)}`)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        // Store in cache
                        dataCache.monthlyComparison = {
                            data: result.data,
                            timestamp: new Date().getTime()
                        };
                        updateMonthlyComparisonTable(result.data);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function updateMonthlyComparisonTable(data) {
            // Create an array of 12 months initialized with null values
            const userHours = new Array(12).fill(null);
            const teamAverage = new Array(12).fill(null);

            // Fill in the actual values
            data.forEach(item => {
                const monthIndex = new Date(item.monthName + ' 1, 2000').getMonth();
                userHours[monthIndex] = item.userHours;
                teamAverage[monthIndex] = item.teamAverage;
            });

            // Create the table rows
            const rows = `
                <tr>
                    <td><strong>User Hours</strong></td>
                    ${userHours.map((hours, index) => {
                        const avg = teamAverage[index];
                        const shouldHighlight = hours !== null && avg !== null && hours < (avg * 0.75); // Highlight if 25% below average
                        return `<td class="hours-cell" data-hours="${shouldHighlight}">${hours !== null ? hours : '-'}</td>`;
                    }).join('')}
                </tr>
                <tr>
                    <td><strong>Team Average</strong></td>
                    ${teamAverage.map(avg => `<td>${avg !== null ? avg : '-'}</td>`).join('')}
                </tr>`;

            document.getElementById('monthlyComparison').innerHTML = rows;
        }

        let currentUserType = null;
        let currentUserEmail = null;

        function handleUserChange(email) {
            if (!email) return;
            
            console.log('User changed to:', email);
            currentUserEmail = email;
            
            const currentValue = document.getElementById('timeFilter').value;
            const isMonthly = currentValue.startsWith('Month_');
            loadData(true, isMonthly);
            
            loadWeeklyTotals('THIS', 'weeklyTotalsThis', true);
            loadWeeklyTotals('LAST', 'weeklyTotalsLast', true);
            loadMonthlyComparison(true);
            loadWeekendHours(true);
            loadWeeklyData();
        }

        // Add this function to format the timestamp
        function formatLastUpdateTime(timestamp) {
            // Create date object from UTC timestamp
            const updateTime = new Date(timestamp + 'Z'); // Append 'Z' to ensure UTC interpretation
            const now = new Date();
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);

            // Convert to PDT/PST
            const options = {
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'America/Los_Angeles',
                hour12: true
            };

            const timeStr = updateTime.toLocaleString('en-US', options);
            const dateOptions = {
                month: 'short',
                day: 'numeric',
                timeZone: 'America/Los_Angeles'
            };

            // Compare dates in PDT
            const updateTimePDT = new Date(updateTime.toLocaleString('en-US', { timeZone: 'America/Los_Angeles' }));
            const nowPDT = new Date(now.toLocaleString('en-US', { timeZone: 'America/Los_Angeles' }));
            const yesterdayPDT = new Date(yesterday.toLocaleString('en-US', { timeZone: 'America/Los_Angeles' }));

            // Check if it's today in PDT
            if (updateTimePDT.toDateString() === nowPDT.toDateString()) {
                return `Last Updated ${timeStr} (PDT) Today`;
            }
            // Check if it's yesterday in PDT
            else if (updateTimePDT.toDateString() === yesterdayPDT.toDateString()) {
                return `Last Updated ${timeStr} (PDT) Yesterday`;
            }
            // For older dates
            else {
                const dateStr = updateTime.toLocaleString('en-US', dateOptions);
                return `Last Updated ${dateStr} ${timeStr} (PDT)`;
            }
        }

        function loadLastUpdateTime() {
            fetch('/Index?handler=LatestUpdate')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        const formattedTime = formatLastUpdateTime(result.timestamp);
                        document.getElementById('lastUpdateTime').textContent = formattedTime;
                    }
                })
                .catch(error => console.error('Error loading update time:', error));
        }

        function formatTotalHours(hours) {
            if (hours < 1) {
                const minutes = Math.round(hours * 60);
                return `${minutes} minutes`;
            } else {
                const wholeHours = Math.floor(hours);
                const minutes = Math.round((hours - wholeHours) * 60);
                if (minutes === 0) {
                    return `${wholeHours} hour${wholeHours !== 1 ? 's' : ''}`;
                }
                return `${wholeHours} hour${wholeHours !== 1 ? 's' : ''} ${minutes} min`;
            }
        }

        function loadTotalHoursToday() {
            fetch('/Index?handler=TotalHoursToday')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        const formattedHours = formatTotalHours(result.totalHours);
                        document.getElementById('totalHoursToday').textContent = `Total Logged Today by Team: ${formattedHours}`;
                    }
                })
                .catch(error => console.error('Error loading total hours:', error));
        }

        function loadWeekendHours(forceRefresh = false) {
            fetch(`/Index?handler=WeekendHours&userEmail=${encodeURIComponent(currentUserEmail)}`)
                .then(response => response.json())
                .then(result => {
                    const noDataMessage = document.getElementById('noWeekendHoursMessage');
                    const tableElement = document.getElementById('weekendHoursTabulatorTable');

                    if (result.success && result.data.length > 0) {
                        const weekendEntries = result.data;
                        let totalDuration = 0;

                        // Process entries: format date and calculate total duration
                        const childrenData = weekendEntries.map(entry => {
                            totalDuration += entry.duration;
                            const date = new Date(entry.date);
                            const formattedDate = `${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getDate().toString().padStart(2, '0')}/${date.getFullYear()}`;
                            return {
                                ...entry, // Copy existing properties
                                weekdayDate: `${entry.weekday} - ${formattedDate}`,
                                durationFormatted: formatTotalHours(entry.duration)
                            };
                        });

                        // Create parent row data
                        const parentData = [{
                            weekdayDate: `Total Weekend Hours`, // Or any title you prefer
                            durationFormatted: formatTotalHours(totalDuration),
                            _children: childrenData
                        }];

                        // Show table, hide message
                        noDataMessage.style.display = 'none';
                        tableElement.style.display = 'block';

                        // Initialize or update Tabulator
                        if (!weekendTable) {
                            weekendTable = new Tabulator("#weekendHoursTabulatorTable", {
                                data: parentData,
                                layout: "fitColumns",
                                dataTree: true,
                                dataTreeStartExpanded: false, // Start collapsed
                                dataTreeChildField: "_children",
                                columns: [
                                    { title: "Day - Date", field: "weekdayDate", headerSort: false },
                                    { title: "Board Name", field: "boardName", headerSort: false },
                                    { title: "Group Name", field: "groupName", headerSort: false },
                                    { title: "Item Name", field: "itemName", headerSort: false },
                                    { title: "Duration", field: "durationFormatted", hozAlign: "left", headerSort: false }
                                ],
                                // Adjust height dynamically or set a fixed height
                                height: "auto" // Allows dynamic height based on rows
                            });
                        } else {
                            weekendTable.setData(parentData);
                        }

                    } else {
                        // Show message, hide/clear table
                        noDataMessage.style.display = 'block';
                        tableElement.style.display = 'none';
                        if (weekendTable) {
                            weekendTable.clearData(); // Clear data if table exists
                        }
                        if (!result.success) {
                            console.error('Error loading weekend hours:', result.error);
                        }
                    }
                })
                .catch(error => {
                    console.error('Error fetching weekend hours:', error);
                    document.getElementById('noWeekendHoursMessage').textContent = 'Error loading weekend data.';
                    document.getElementById('noWeekendHoursMessage').style.display = 'block';
                    document.getElementById('weekendHoursTabulatorTable').style.display = 'none';
                    if (weekendTable) {
                        weekendTable.clearData();
                    }
                });
        }

        function loadWeeklyData() {
            console.log('loadWeeklyData called');
            // Get the current user email if none is set
            if (!currentUserEmail) {
                currentUserEmail = $('#currentUserEmailInput').data('email');
                console.log('Setting currentUserEmail from input:', currentUserEmail);
            }

            if (!currentUserEmail) {
                console.log('No user email available, skipping weekly data load');
                return;
            }

            console.log('Loading weekly data for user:', currentUserEmail);
            fetch(`/Index?handler=WeeklyVisualizationData&userEmail=${encodeURIComponent(currentUserEmail)}`)
                .then(response => {
                    console.log('Weekly data response received:', response.status);
                    return response.json();
                })
                .then(result => {
                    console.log('Weekly data result:', result);
                    if (result.success) {
                        const data = result.data;
                        console.log('Received visualization data:', data);
                        
                        // Extract week numbers and data points
                        const weekNumbers = data.map(item => `Week ${item.weekNumber}`);
                        const userHours = data.map(item => item.userHours);
                        const teamHours = data.map(item => item.avgTeamHours);
                        const idealHours = data.map(item => item.weeklyIdeal);

                        console.log('Processed data:', {
                            weeks: weekNumbers,
                            user: userHours,
                            team: teamHours,
                            ideal: idealHours
                        });
                        
                        // Get the canvas element
                        const ctx = document.getElementById('weeklyChart');
                        if (!ctx) {
                            console.error('Could not find weeklyChart canvas element');
                            return;
                        }
                        
                        // Destroy existing chart if it exists
                        if (window.weeklyChart instanceof Chart) {
                            console.log('Destroying existing chart');
                            window.weeklyChart.destroy();
                        }
                        
                        console.log('Creating new chart');
                        // Create the new chart
                        window.weeklyChart = new Chart(ctx, {
                            type: 'line',
                            data: {
                                labels: weekNumbers,
                                datasets: [
                                    {
                                        label: 'User Hours',
                                        data: userHours,
                                        borderColor: 'rgb(75, 192, 192)',
                                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                        tension: 0,
                                        fill: false
                                    },
                                    {
                                        label: 'Team Average Hours',
                                        data: teamHours,
                                        borderColor: 'rgb(255, 99, 132)',
                                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                        tension: 0,
                                        fill: false
                                    },
                                    {
                                        label: 'Weekly Ideal',
                                        data: idealHours,
                                        borderColor: 'rgb(54, 162, 235)',
                                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                        tension: 0,
                                        fill: false,
                                        borderDash: [5, 5]
                                    }
                                ]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    title: {
                                        display: true,
                                        text: 'Weekly Hours Comparison',
                                        font: {
                                            size: 20,
                                            weight: 'bold'
                                        },
                                        padding: {
                                            bottom: 20
                                        }
                                    },
                                    legend: {
                                        position: 'top',
                                        labels: {
                                            padding: 20,
                                            font: {
                                                size: 14
                                            },
                                            usePointStyle: true,
                                            generateLabels: function(chart) {
                                                const datasets = chart.data.datasets;
                                                return datasets.map((dataset, i) => ({
                                                    text: dataset.label === 'Weekly Ideal' ? 'Weekly Target (28h)' :
                                                          dataset.label === 'User Hours' ? 'User Hours' :
                                                          'Team Average',
                                                    fillStyle: dataset.backgroundColor,
                                                    strokeStyle: dataset.borderColor,
                                                    lineWidth: 2,
                                                    hidden: !chart.isDatasetVisible(i),
                                                    lineDash: dataset.borderDash,
                                                    index: i
                                                }));
                                            }
                                        }
                                    }
                                },
                                scales: {
                                    x: {
                                        title: {
                                            display: true,
                                            text: 'Week Number'
                                        },
                                        grid: {
                                            display: false
                                        }
                                    },
                                    y: {
                                        title: {
                                            display: true,
                                            text: 'Hours'
                                        },
                                        beginAtZero: true
                                    }
                                }
                            }
                        });
                        console.log('Chart created successfully');
                    } else {
                        console.error('Error loading visualization data:', result.error);
                    }
                })
                .catch(error => {
                    console.error('Error fetching visualization data:', error);
                });
        }

        // Make sure the chart is loaded when switching to the visualizations tab
        document.addEventListener('DOMContentLoaded', () => {
            const visualizationsTab = document.getElementById('visualizations-tab');
            visualizationsTab.addEventListener('shown.bs.tab', () => {
                console.log('Visualization tab shown, loading data...');
                loadWeeklyData();
            });
        });

        // Update the DOMContentLoaded event listener to include loadWeeklyData
        document.addEventListener("DOMContentLoaded", () => {
            addRefreshButton();
            loadUsers();
            loadLastUpdateTime();
            loadTotalHoursToday();
            loadWeekendHours();
            loadWeeklyData(); // Add this line
        });

        // Update the refresh button click handler to also refresh weekend hours
        function addRefreshButton() {
            const refreshButton = document.getElementById('refreshButton');
            refreshButton.onclick = () => {
                console.log('Refresh button clicked, currentUserEmail:', currentUserEmail);
                const currentValue = document.getElementById('timeFilter').value;
                const isMonthly = currentValue.startsWith('Month_');
                loadData(true, isMonthly);
                if (!isMonthly) {
                    loadWeeklyTotals('THIS', 'weeklyTotalsThis', true);
                    loadWeeklyTotals('LAST', 'weeklyTotalsLast', true);
                }
                loadMonthlyComparison(true);
                loadLastUpdateTime();
                loadTotalHoursToday();
                loadWeekendHours(true);
                loadWeeklyData(); // Add this line to refresh the visualization
            };
        }

        async function loadMVPData() {
            try {
                // Set last month name
                const monthNames = ["January", "February", "March", "April", "May", "June",
                                  "July", "August", "September", "October", "November", "December"];
                const lastMonth = new Date();
                lastMonth.setMonth(lastMonth.getMonth() - 1);
                const lastMonthName = monthNames[lastMonth.getMonth()];
                document.getElementById('currentMonthName').textContent = lastMonthName;

                // Load overall MVP data
                const overallResponse = await fetch('/Index?handler=MVPOverall');
                const overallData = await overallResponse.json();
                
                const overallTbody = document.getElementById('mvpTableBody');
                overallTbody.innerHTML = '';
                
                overallData.forEach((mvp, index) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="text-center" style="font-size: 20px;">
                            ${index === 0 ? '🥇' : index === 1 ? '🥈' : '🥉'}
                        </td>
                        <td style="font-size: 16px;">${mvp.userName}</td>
                        <td class="text-center" style="font-size: 16px;">${mvp.totalHours.toFixed(2)}</td>
                    `;
                    overallTbody.appendChild(row);
                });

                // Load last month MVP data
                const lastMonthResponse = await fetch('/Index?handler=MVPLastMonth');
                const lastMonthData = await lastMonthResponse.json();
                
                const lastMonthTbody = document.getElementById('mvpLastMonthTableBody');
                lastMonthTbody.innerHTML = '';
                
                lastMonthData.forEach((mvp, index) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="text-center" style="font-size: 20px;">
                            ${index === 0 ? '🥇' : index === 1 ? '🥈' : '🥉'}
                        </td>
                        <td style="font-size: 16px;">${mvp.userName}</td>
                        <td class="text-center" style="font-size: 16px;">${mvp.totalHours.toFixed(2)}</td>
                    `;
                    lastMonthTbody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading MVP data:', error);
            }
        }

        // Add this to your existing tab event listeners
        document.getElementById('mvp-tab').addEventListener('shown.bs.tab', function (e) {
            loadMVPData();
        });
    </script>
</div>

<style>
    .mvp-card {
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 0 20px rgba(0,0,0,0.1);
        border: none;
        transition: transform 0.3s ease;
    }

    .mvp-card:hover {
        transform: translateY(-5px);
    }
</style>